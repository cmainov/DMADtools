% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summary_table.R
\name{summary_table}
\alias{summary_table}
\title{Generate "Nice" `flextable` From Input Data}
\usage{
summary_table( d, var1 = var1, var2 = NULL, table.grouping = NULL, 
pop.var = NULL, add.summary.row = TRUE, summary.row.name = NULL, 
add.summary.col = TRUE, digs.perc = 1, digs.rate = 2, summary.col.name = NULL, 
order.rows = NULL, order.cols = NULL, order.groups = NULL, foot.lines = c(), 
table.title = NULL, metric = c( "count", "rate" ), nm.var1 = NULL, 
count.supp = NULL, remove.cols = NULL, rate.supp = NULL, 
count.supp.symbol = "--", rate.supp.symbol = "*", per = 1000, 
NAs.footnote = FALSE, percentages.rel = "var1", include.percent.sign = TRUE )
}
\arguments{
\item{d}{A data frame or tibble. Data must be the exact subset of data that needs to analyzed for the table generation.}

\item{var1}{A string. Name of first variable to stratify on (as it appears in the input data, `d`). Cannot be  `NULL`.}

\item{var2}{A string. Name of second variable to stratify on (as it appears in the input data, `d`). Can be `NULL` if only one variable is required and there is no cross-tabulation or if `table.grouping` and `var1` are specified for a cross-tabulation instead.}

\item{table.grouping}{A string or `NULL` (if no grouping in table is desired). Name of variable to create grouped output table with (creates grouping rows in the table). Can be 1 variable at maximum.}

\item{pop.var}{A string or `NULL`. Variable in `d` with population count data for computing rates if "rate" is dplyr::selected in `metric`. This is normally an aggregate variable.}

\item{add.summary.row}{A logical. Add a row with unaggregated results (based on `var1`). `TRUE` is default and the name given to the row is "Summary Row". If another name is desired, it can be specified with `summary.row.name` and its order/position can be specified with the `order.rows` argument.}

\item{summary.row.name}{A string. Name to appear for summary row label. Default is "Summary Row". This option is only relevant if `add.summary.row == TRUE`.}

\item{add.summary.col}{A logical. Add a row with unaggregated results (based on `var2`). Note that this argument is inconsequential if `var2 == NULL`.}

\item{digs.perc}{An integer. Digits to round percents to.}

\item{digs.rate}{An integer. Digits to round rates to.}

\item{summary.col.name}{A string. Name to appear for summary column header. Default is "All". This option is only relevant if `add.summary.col == TRUE`.}

\item{order.rows}{A vector with the levels in custom order of the stratifying variable in the rows(typically `var1` but can also be `table.grouping` depending on how the function is specified). Entries must match levels of stratifying variable exactly. If there are any levels of the row variable missing, they are omitted from the final table. Note that any rows removed from the final table do not remove that level from the data itself. If desired, that must be done outside the function with a data step.}

\item{order.cols}{A vector with the levels in custom order of the stratifying variable in the columns (typically `var2` but can also be `table.grouping` depending on how the function is specified). Must match the columns in the final table including the summary column name if `add.summary.col == TRUE` and `summary.col.name` is specified. If there are any levels of the column variable missing, they are omitted from the final table.}

\item{order.groups}{A vector with the levels in custom order of the grouping variable in the columns. Must match the grouping variable (`table.grouping`) names in the final table. if there are any levels of the grouping variable missing, they are omitted from the final table. the orders of the rows within the group are preserved as indicated in `order.rows`. this argument is only valid if `!is.null( var2 ) & !is.null( table.grouping )`.}

\item{foot.lines}{A vector with entries (strings) corresponding to each footline to be added to the table.}

\item{table.title}{A string. Name of table to display as the title. `NULL` is default for no title in the table.}

\item{metric}{A vector of string(s). One or two of: "percent", "rate", "count". Can dplyr::select up to two options to plot at maximum.}

\item{nm.var1}{A string. Name of `var1` that you would like to appear in the table. `NULL` is default, which prompts the column name as it is written in the input dataset, `d`.}

\item{count.supp}{an integer or  `NULL` if suppression of counts below a certain threshold is desired, specify the integer value. Any cells with counts less than or equal to `count.supp` will be suppressed. default is `NULL`.}

\item{remove.cols}{A string. The string is fed to `dplyr::select( -contains( remove.cols` ) )` to remove undesired columns from the final table. Should be based off of columns seen in final generated table.}

\item{rate.supp}{An integer or  `NULL` if suppression of rates where the count the rate is based off is less than some threshold. Any cells with rates based on counts less than or equal to `rate.supp` will be suppressed. default is `NULL`.}

\item{count.supp.symbol}{A string. The character to display in the table where the count is suppressed.}

\item{rate.supp.symbol}{A string. The character to display in the table where the rate is suppressed.}

\item{per}{A numeric. The denominator "per" value to use for computing rates. Default is per `1000` (e.g., 25 births per 1,000 individuals).}

\item{NAs.footnote}{A logical. Include footnotes detailing number of missing values in the dataset based on `var1` and `var2`?}

\item{percentages.rel}{A string. One of "var1" or "var2" or "table.grouping". Is the variables with which percentages should be calculated with respect to. `table.grouping` can only be specified if only `var1` is specified and `var2 == NULL`.}

\item{include.percent.sign}{A logical. Include percent (\%) sign in computed percent columns?}
}
\value{
Object of class \code{list} containing the following elements:

`flextable`: An object of class `flextable` that produces the "nice" flextable.

`frame`: An object of class `data.frame` that contains the dataset fed to `flextable` for final tabulation.

NOTE: In the final output table (`flextable`), levels of `var1` appear in the rows and levels of `var2` appear in the columns if only `var1` and `var2` are specified. If `var1` and `table.grouping`
are only specified, then levels of `var1` appear in the columns and levels of `table.grouping` appear in the rows. If `var1`, `var2`, and `table.grouping` are specified, then levels of `var1` 
appear in the rows, levels of `var2` appear in the columns, and levels of `table.grouping` appear as nested rows that group the table.
}
\description{
Create a "nice" publication-level table by tabulating up to three variables at once.
}
\details{
Employs `flextable` to generate a "nice" publication-level table that can be easily exported or included in R Rmarkdown (.RMD) files.
}
\examples{

library( DMADtools )

summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               var2 = "v2",
               percentages.rel = "var1" )


# alternate percentages.rel argument
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               var2 = "v2",
               percentages.rel = "var2" )

# specify var1 and table.grouping instead of var1 and var2, 
# note, the change in percentages.rel            
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               table.grouping = "v2",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               percentages.rel = "table.grouping" )

# rename summary row and column and shuffle column and row orders
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               table.grouping = "v2",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               summary.col.name = "All Geos", # change name of summary column
               summary.row.name = "All Char", # change name of summary row
               order.cols = c( "Geo 1", "Geo 2", "All Geos", "Geo 3" ), # reorder columns in output table
               order.rows = c( "Char 1", "Char 2", "All Char", "Char 3" ), # reorder columns in output table
               percentages.rel = "table.grouping" )

# same call as previous, but use order.cols and order.rows to remove some rows and columns from final table
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               table.grouping = "v2",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               summary.col.name = "All Geos", # change name of summary column
               summary.row.name = "All Char", # change name of summary row
               order.cols = c( "Geo 1", "All Geos", "Geo 3" ), # reorder columns in output table
               order.rows = c( "Char 1", "Char 2", "All Char" ), # reorder columns in output table
               percentages.rel = "table.grouping" )

# use remove.cols instead of order.cols argument for removing an undesired column from final table
summary_table( d = d.example,
               metric = c( "count", "rate" ),
               var1 = "v1",
               var2 = "v2",
               add.summary.row =TRUE,
               add.summary.col = TRUE,
               remove.cols = "Char 3",
               percentages.rel = "var2",
               pop.var = "v_pop" )

# rename var1 column header
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               nm.var1 = "Variable 1", # for relabeling the header
               table.grouping = "v2",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               summary.col.name = "All Geos", # change name of summary column
               summary.row.name = "All Char", # change name of summary row
               order.cols = c( "Geo 1", "All Geos", "Geo 3" ), # reorder columns in output table
               order.rows = c( "Char 1", "Char 2", "All Char" ), # reorder columns in output table
               percentages.rel = "table.grouping" )

# do a 3-way tabulation
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               var2 = "v3",
               table.grouping = "v2",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               percentages.rel = "var2" )

# use order.groups argument to remove some grouping categories
summary_table( d = d.example,
               metric = c( "count", "percent" ),
               var1 = "v1",
               var2 = "v3",
               table.grouping = "v2",
               order.groups = c( "Char 2", "Char 1" ),
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               percentages.rel = "var2" )

# example with rate computation and add.summary.row and add.summary.col are TRUE
summary_table( d = d.example,
               metric = c( "count", "rate" ),
               var1 = "v1",
               var2 = "v2",
               add.summary.row = TRUE,
               add.summary.col = TRUE,
               percentages.rel = "var2",
               pop.var = "v_pop" )

# foot.lines argument and NAs.footnote
set.seed( 974 )

summary_table( d = d.example.na,
               metric = c( "count", "percent" ),
               var1 = "v1",
               var2 = "v2",
               nm.var1 = "Variable 1",
               add.summary.row =TRUE,
               add.summary.col = TRUE,
               foot.lines = c("This is the first footer line",
                              "This is the second footer line" ), # manual footer lines
               remove.cols = "Char 3",
               percentages.rel = "var2",
               NAs.footnote = TRUE, # produces the footnote of excluded observations
               pop.var = "v_pop" ) 

# add rate suppression rule
summary_table( d = d.example.na,
               metric = c( "count", "rate" ),
               var1 = "v1",
               var2 = "v2",
               nm.var1 = "Variable 1",
               add.summary.row =TRUE,
               add.summary.col = TRUE,
               foot.lines = c("This is the first footer line",
                              "This is the second footer line" ), # manual footer lines
               remove.cols = "Char 3",
               percentages.rel = "var2",
               count.supp = 50, # suppress values/counts in table <= 50
               rate.supp = 50, # suppress rate calculation when counts are <= 50
               NAs.footnote = TRUE, # produces the footnote of excluded observations
               pop.var = "v_pop" ) 

# give it a title
summary_table( d = d.example.na,
               metric = c( "count", "rate" ),
               var1 = "v1",
               var2 = "v2",
               nm.var1 = "Variable 1",
               add.summary.row =TRUE,
               add.summary.col = TRUE,
               foot.lines = c("This is the first footer line",
                              "This is the second footer line" ), # manual footer lines
               remove.cols = "Char 3",
               percentages.rel = "var2",
               count.supp = 50, # suppress values/counts in table <= 50
               rate.supp = 50, # suppress rate calculation when counts are <= 50
               NAs.footnote = TRUE, # produces the foornote of excluded observations
               pop.var = "v_pop",
               table.title = "This is Table 1" ) # title

}
